import streamlit as st
import pandas as pd
import sqlite3
import altair as alt
from matplotlib import pyplot as plt

from data_clustering.elbow_visualize import get_elbow, check_tables
from preprocessing import encode_ward, scale_features
from model import train_kmeans, train_dbscan
from streamlit_folium import st_folium
import folium
from folium.features import CustomIcon
from sklearn.cluster import KMeans

# Load data t·ª´ SQLite
@st.cache_data
def load_data():
    conn = sqlite3.connect("data_real_estate.db")
    df = pd.read_sql_query("SELECT * FROM real_estate_processed", conn)
    df = df.dropna(subset=['area', 'price_total', 'ward', 'district', 'long', 'lat']).copy()
    return df

logo_url = 'https://www.pngplay.com/wp-content/uploads/7/Home-Logo-Background-PNG-Image.png'

st.title("üè° Ph√¢n t√≠ch gi√° nh√† ƒë·∫•t - Ph√¢n c·ª•m")
df = load_data()

# Ch·ªçn thu·∫≠t to√°n ph√¢n c·ª•m
algo = st.selectbox("Ch·ªçn thu·∫≠t to√°n ph√¢n c·ª•m:", ["KMeans"])

# Gi·∫£i th√≠ch thu·∫≠t to√°n ƒë√£ ch·ªçn
if algo == "KMeans":
    st.info("""
    **KMeans ‚Äì Ph√¢n c·ª•m theo s·ªë l∆∞·ª£ng c·ª• th·ªÉ**
    - Ph√¢n chia d·ªØ li·ªáu th√†nh K c·ª•m r√µ r√†ng.
    - Ph√π h·ª£p khi mu·ªën **d·ª± ƒëo√°n c·ª•m cho b·∫•t ƒë·ªông s·∫£n m·ªõi**.
    - C·∫ßn ch·ªâ ƒë·ªãnh s·ªë c·ª•m tr∆∞·ªõc v√† c√≥ th·ªÉ k√©m hi·ªáu qu·∫£ n·∫øu d·ªØ li·ªáu ch·ª©a nhi·ªÖu.
    """)

eps = 0.5
min_samples = 5

# Load data again to ensure latest
df = load_data()

# ELBOW
st.subheader("Elbow Method")
data_scaled, scaler, elbow_inertia = get_elbow(load_data())
fig, ax = plt.subplots()
ax.plot(range(1, 11), elbow_inertia, marker='o')
ax.set_title('Elbow Method')
ax.set_xlabel('Number of clusters')
ax.set_ylabel('Inertia')
st.pyplot(fig)
st.info("""
Trong ph∆∞∆°ng ph√°p Elbow, b·∫°n c·∫ßn t√¨m ƒëi·ªÉm "khu·ª∑u tay" (elbow point) n∆°i m√† gi√° tr·ªã inertia gi·∫£m ch·∫≠m l·∫°i, nghƒ©a l√† vi·ªác tƒÉng s·ªë l∆∞·ª£ng cluster (k) kh√¥ng c√≤n mang l·∫°i c·∫£i thi·ªán ƒë√°ng k·ªÉ v·ªÅ ƒë·ªô ch·∫∑t ch·∫Ω c·ªßa c√°c cluster.

Nh√¨n v√†o bi·ªÉu ƒë·ªì, inertia gi·∫£m m·∫°nh t·ª´ k=1 ƒë·∫øn k=3, sau ƒë√≥ t·ªëc ƒë·ªô gi·∫£m ch·∫≠m d·∫ßn t·ª´ k=4 tr·ªü ƒëi. Elbow point xu·∫•t hi·ªán r√µ r√†ng nh·∫•t ·ªü k=3, v√¨ sau ƒëi·ªÉm n√†y, ƒë∆∞·ªùng cong tr·ªü n√™n ph·∫≥ng h∆°n.

V√¨ v·∫≠y, ch·ªçn k = 3.
""")
# ELBOW

# K-Means Process
kmeans = KMeans(n_clusters=3, random_state=42)
kmeans.fit(data_scaled)
labels = kmeans.labels_
centroids = kmeans.cluster_centers_
df['cluster'] = labels
st.write("S·ªë l∆∞·ª£ng b·∫•t ƒë·ªông s·∫£n trong m·ªói c·ª•m:")
st.write(df['cluster'].value_counts())
st.write("T√¢m c·ª•m (centroids) trong kh√¥ng gian chu·∫©n h√≥a:")
st.write(pd.DataFrame(centroids, columns=['price_total', 'price_m2', 'area', 'long', 'lat']))
# K-Means Process

# Visualization
st.subheader("Tr·ª±c quan h√≥a c√°c c·ª•m KMeans")
st.write("Bi·ªÉu ƒë·ªì ph√¢n t√°n c√°c c·ª•m (d·ª±a tr√™n gi√° t·ªïng v√† di·ªán t√≠ch)")
colors = ['blue', 'green', 'red']
fig, ax = plt.subplots(figsize=(10, 6))

for cluster in range(3):
    cluster_data = df[df['cluster'] == cluster]
    ax.scatter(cluster_data['price_total'], cluster_data['area'],
               c=colors[cluster], label=f'C·ª•m {cluster}', alpha=0.6)


# V·∫Ω t√¢m c·ª•m
centroids_original = scaler.inverse_transform(centroids)
ax.scatter(centroids_original[:, 0], centroids_original[:, 2],
           c='black', marker='x', s=200, linewidths=3, label='T√¢m c·ª•m')

ax.set_title('Ph√¢n c·ª•m b·∫•t ƒë·ªông s·∫£n d·ª±a tr√™n KMeans')
ax.set_xlabel('Gi√° t·ªïng (price_total, tri·ªáu VNƒê)')
ax.set_xscale('log')
ax.set_ylabel('Di·ªán t√≠ch (area, m¬≤)')
ax.set_yscale('log')
ax.legend()

st.pyplot(fig)
# Visualization

# Folium Map
map_center = [df['long'].mean(), df['lat'].mean()]
m = folium.Map(location=map_center, zoom_start=12)

popup_style = """
<style>
    .leaflet-popup-content {
        width: 300px !important;
        padding: 10px;
        font-family: Arial, sans-serif;
        line-height: 1.5;
    }
    .leaflet-popup-content b {
        color: #2c3e50;
    }
    .leaflet-popup-content div {
        margin-bottom: 5px;
    }
</style>
"""
custom_icon = CustomIcon(
        icon_image=logo_url,
        icon_size=(20, 20)
    )

districts = sorted(df['district'].unique())
colors = {0: 'blue', 1: 'green', 2: 'purple'}

for district in districts:
    # T·∫°o FeatureGroup cho qu·∫≠n
    fg = folium.FeatureGroup(name=district, show=False)  # M·∫∑c ƒë·ªãnh ·∫©n
    # L·ªçc d·ªØ li·ªáu theo qu·∫≠n
    district_df = df[df['district'] == district]
    # Th√™m markers
    for idx, row in district_df.iterrows():
        popup_content = (
            f"{popup_style}"
            f"<div><b>T√™n:</b> {row['name']}</div>"         
            f"<div><b>Di·ªán t√≠ch:</b> {row['area']:,.0f} m2</div>"
            f"<div><b>Gi√°/m2:</b> {row['price_m2']:,.0f} VNƒê</div>"
            f"<div><b>Gi√°:</b> {row['price_total']:,.0f} VNƒê</div>"
            f"<div><b>Qu·∫≠n:</b> {row['district']}</div>"
            f"<div><b>ƒê·ªãa ch·ªâ:</b> {row['street']}, {row['ward']}, {row['district']}</div>"
            f"<div><b>C·ª•m:</b> {row['cluster']}</div>"
        )
        folium.CircleMarker(
            location=[row['lat'], row['long']],
            radius=6,
            color=colors[row['cluster']],
            fill=True,
            fill_color=colors[row['cluster']],
            fill_opacity=0.7,
            popup=folium.Popup(popup_content, max_width=300)
        ).add_to(fg)
    fg.add_to(m)

# Th√™m layer t·∫•t c·∫£
fg_all = folium.FeatureGroup(name='T·∫•t c·∫£', show=True)  # M·∫∑c ƒë·ªãnh hi·ªÉn th·ªã
for idx, row in df.iterrows():
    popup_content = (
        f"{popup_style}"
        f"<div><b>T√™n:</b> {row['name']}</div>"
        f"<div><b>Di·ªán t√≠ch:</b> {row['area']:,.0f} m2</div>"
        f"<div><b>Gi√°/m2:</b> {row['price_m2']:,.0f} VNƒê</div>"
        f"<div><b>Gi√°:</b> {row['price_total']:,.0f} VNƒê</div>"
        f"<div><b>Qu·∫≠n:</b> {row['district']}</div>"
        f"<div><b>ƒê·ªãa ch·ªâ:</b> {row['street']}, {row['ward']}, {row['district']}</div>"
        f"<div><b>C·ª•m:</b> {row['cluster']}</div>"
    )
    folium.CircleMarker(
        location=[row['lat'], row['long']],
        radius=6,
        color=colors[row['cluster']],
        fill=True,
        fill_color=colors[row['cluster']],
        fill_opacity=0.7,
        popup=folium.Popup(popup_content, max_width=300)
    ).add_to(fg_all)
fg_all.add_to(m)

# Th√™m LayerControl
folium.LayerControl(collapsed=False).add_to(m)

st_folium(m, width=700, height=500)

# Folium Map

# Predict with KMeans
# st.subheader("Nh·∫≠p th√¥ng tin nh√† c·∫ßn d·ª± ƒëo√°n")
# area = st.number_input("Di·ªán t√≠ch (m¬≤):", min_value=10.0, max_value=2000.0, value=100.0)
# price_m2 = st.number_input("Gi√° m·ªói m¬≤ (∆∞·ªõc l∆∞·ª£ng):", min_value=1000000.0, value=20000000.0)
#
# selected_district = st.selectbox("Ch·ªçn qu·∫≠n/huy·ªán:", sorted(df['district'].unique()))
# wards_in_district = df[df['district'] == selected_district]['ward'].unique()
# ward_input = st.selectbox("Ch·ªçn ph∆∞·ªùng/x√£:", sorted(wards_in_district))
#
# ward_subset = df[(df['district'] == selected_district) & (df['ward'] == ward_input)]
#
# if not ward_subset.empty:
#     # Encode ph∆∞·ªùng ƒë√£ ch·ªçn
#     ward_input_df = pd.DataFrame({'ward': [ward_input]})
#     ward_input_df['ward'] = ward_input_df['ward'].astype(ward_dtype)
#     ward_encoded = ward_input_df['ward'].cat.codes.values[0]
#
#     if st.button("D·ª± ƒëo√°n gi√°"):
#         new_data = scaler.transform([[area, price_m2, ward_encoded]])  # chu·∫©n h√≥a d·ªØ li·ªáu m·ªõi
#         cluster = int(model.predict(new_data)[0])  # D·ª± ƒëo√°n c·ª•m
#
#         similar = df_clustered[df_clustered['cluster'] == cluster]
#         avg_price = similar['price_total'].mean()
#
#         # L∆∞u k·∫øt qu·∫£ v√†o session_state ƒë·ªÉ kh√¥ng b·ªã m·∫•t khi c·∫≠p nh·∫≠t giao di·ªán
#         st.session_state.prediction = f"‚úÖ Nh√† n√†y thu·ªôc c·ª•m s·ªë {cluster}. Gi√° trung b√¨nh c·ª•m n√†y l√†: {avg_price:,.0f} VND"
#         st.session_state.similar_properties = similar[['name', 'area', 'price_total', 'district', 'ward']].head(10)
#
# else:
#     st.error("‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin ph∆∞·ªùng ƒë√£ ch·ªçn. Vui l√≤ng ki·ªÉm tra l·∫°i.")
#
# if st.session_state.prediction:
#     st.success(st.session_state.prediction)
#     st.write("### M·ªôt s·ªë b·∫•t ƒë·ªông s·∫£n t∆∞∆°ng t·ª±:")
#     st.dataframe(st.session_state.similar_properties)
# Predict with KMeans

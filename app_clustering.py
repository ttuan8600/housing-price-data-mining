import streamlit as st
import pandas as pd
import sqlite3
import altair as alt
from preprocessing import encode_ward, scale_features
from model import train_kmeans, train_dbscan
from streamlit_folium import st_folium
import folium
from folium.features import CustomIcon

# Load data t·ª´ SQLite
@st.cache_data
def load_data():
    conn = sqlite3.connect("data_real_estate.db")
    df = pd.read_sql_query("SELECT * FROM real_estate_processed", conn)
    df = df.dropna(subset=['area', 'price_total', 'ward', 'district', 'lat', 'long']).copy()
    return df

logo_url = 'https://www.pngplay.com/wp-content/uploads/7/Home-Logo-Background-PNG-Image.png'

st.title("üè° Ph√¢n t√≠ch gi√° nh√† ƒë·∫•t - Ph√¢n c·ª•m")
df = load_data()

# Ch·ªçn thu·∫≠t to√°n ph√¢n c·ª•m
algo = st.selectbox("Ch·ªçn thu·∫≠t to√°n ph√¢n c·ª•m:", ["KMeans", "DBSCAN"])

# Gi·∫£i th√≠ch thu·∫≠t to√°n ƒë√£ ch·ªçn
if algo == "KMeans":
    st.info("""
    **KMeans ‚Äì Ph√¢n c·ª•m theo s·ªë l∆∞·ª£ng c·ª• th·ªÉ**
    - Ph√¢n chia d·ªØ li·ªáu th√†nh K c·ª•m r√µ r√†ng.
    - Ph√π h·ª£p khi mu·ªën **d·ª± ƒëo√°n c·ª•m cho b·∫•t ƒë·ªông s·∫£n m·ªõi**.
    - C·∫ßn ch·ªâ ƒë·ªãnh s·ªë c·ª•m tr∆∞·ªõc v√† c√≥ th·ªÉ k√©m hi·ªáu qu·∫£ n·∫øu d·ªØ li·ªáu ch·ª©a nhi·ªÖu.
    """)
else:
    st.info("""
    **DBSCAN ‚Äì Ph√¢n c·ª•m theo m·∫≠t ƒë·ªô**
    - T·ª± ƒë·ªông x√°c ƒë·ªãnh s·ªë c·ª•m, t·ªët khi d·ªØ li·ªáu c√≥ h√¨nh d·∫°ng ph·ª©c t·∫°p ho·∫∑c nhi·ªÖu.
    - Nh·ªØng ƒëi·ªÉm kh√¥ng thu·ªôc c·ª•m n√†o s·∫Ω c√≥ **gi√° tr·ªã cluster l√† -1**.
    - **Kh√¥ng h·ªó tr·ª£ d·ª± ƒëo√°n** cho ƒëi·ªÉm m·ªõi nh∆∞ KMeans.
    """)

# C·∫•u h√¨nh cho DBSCAN n·∫øu ƒë∆∞·ª£c ch·ªçn
if algo == "DBSCAN":
    eps = st.slider("Ch·ªçn eps (Œµ):", 0.1, 2.0, step=0.1, value=0.5)
    min_samples = st.slider("Ch·ªçn min_samples:", 2, 10, step=1, value=5)
else:
    eps = 0.5
    min_samples = 5

@st.cache_resource
def process_and_train(df, algo, eps, min_samples):
    df, ward_dtype = encode_ward(df)
    scaler, X_scaled = scale_features(df)

    if algo == "KMeans":
        model, clusters, algo_name = train_kmeans(X_scaled)
    else:
        model, clusters, algo_name = train_dbscan(X_scaled, eps=eps, min_samples=min_samples)

    df['cluster'] = clusters
    return model, scaler, df, algo_name, ward_dtype

# Load data again to ensure latest
df = load_data()

# Ki·ªÉm tra tr·∫°ng th√°i trong session_state
if 'prediction' not in st.session_state:
    st.session_state.prediction = None
    st.session_state.similar_properties = None

# Ph·∫ßn hi·ªÉn th·ªã k·∫øt qu·∫£ ph√¢n c·ª•m
with st.spinner("ƒêang x·ª≠ l√Ω d·ªØ li·ªáu..."):
    model, scaler, df_clustered, algo_name, ward_dtype = process_and_train(df, algo, eps, min_samples)

# X√≥a gi√° tr·ªã d·ª± ƒëo√°n n·∫øu thu·∫≠t to√°n l√† DBSCAN
if algo == "DBSCAN":
    st.session_state.prediction = None
    st.session_state.similar_properties = None

# Ki·ªÉm tra n·∫øu ch·ªçn KMeans ƒë·ªÉ th·ª±c hi·ªán d·ª± ƒëo√°n
if algo_name == "kmeans":
    st.subheader("Nh·∫≠p th√¥ng tin nh√† c·∫ßn d·ª± ƒëo√°n")
    area = st.number_input("Di·ªán t√≠ch (m¬≤):", min_value=10.0, max_value=2000.0, value=100.0)
    price_m2 = st.number_input("Gi√° m·ªói m¬≤ (∆∞·ªõc l∆∞·ª£ng):", min_value=1000000.0, value=20000000.0)

    selected_district = st.selectbox("Ch·ªçn qu·∫≠n/huy·ªán:", sorted(df['district'].unique()))
    wards_in_district = df[df['district'] == selected_district]['ward'].unique()
    ward_input = st.selectbox("Ch·ªçn ph∆∞·ªùng/x√£:", sorted(wards_in_district))

    ward_subset = df[(df['district'] == selected_district) & (df['ward'] == ward_input)]

    if not ward_subset.empty:
        # Encode ph∆∞·ªùng ƒë√£ ch·ªçn
        ward_input_df = pd.DataFrame({'ward': [ward_input]})
        ward_input_df['ward'] = ward_input_df['ward'].astype(ward_dtype)
        ward_encoded = ward_input_df['ward'].cat.codes.values[0]

        if st.button("D·ª± ƒëo√°n gi√°"):
            new_data = scaler.transform([[area, price_m2, ward_encoded]])  # chu·∫©n h√≥a d·ªØ li·ªáu m·ªõi
            cluster = int(model.predict(new_data)[0])  # D·ª± ƒëo√°n c·ª•m

            similar = df_clustered[df_clustered['cluster'] == cluster]
            avg_price = similar['price_total'].mean()

            # L∆∞u k·∫øt qu·∫£ v√†o session_state ƒë·ªÉ kh√¥ng b·ªã m·∫•t khi c·∫≠p nh·∫≠t giao di·ªán
            st.session_state.prediction = f"‚úÖ Nh√† n√†y thu·ªôc c·ª•m s·ªë {cluster}. Gi√° trung b√¨nh c·ª•m n√†y l√†: {avg_price:,.0f} VND"
            st.session_state.similar_properties = similar[['name', 'area', 'price_total', 'district', 'ward']].head(10)

    else:
        st.error("‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin ph∆∞·ªùng ƒë√£ ch·ªçn. Vui l√≤ng ki·ªÉm tra l·∫°i.")
else:
    # N·∫øu thu·∫≠t to√°n kh√¥ng ph·∫£i l√† KMeans (DBSCAN), hi·ªÉn th·ªã c·∫£nh b√°o ho·∫∑c th√¥ng b√°o ph√π h·ª£p
    st.warning("‚ö†Ô∏è DBSCAN kh√¥ng h·ªó tr·ª£ d·ª± ƒëo√°n c·ª•m cho ƒëi·ªÉm m·ªõi.")


# Hi·ªÉn th·ªã k·∫øt qu·∫£ d·ª± ƒëo√°n n·∫øu c√≥
if st.session_state.prediction:
    st.success(st.session_state.prediction)
    st.write("### M·ªôt s·ªë b·∫•t ƒë·ªông s·∫£n t∆∞∆°ng t·ª±:")
    st.dataframe(st.session_state.similar_properties)

# Bi·ªÉu ƒë·ªì gi√° theo di·ªán t√≠ch (m√†u theo c·ª•m) - Cho ph√©p ch·ªçn c·ª•m
st.write("### Bi·ªÉu ƒë·ªì gi√° theo di·ªán t√≠ch (m√†u theo c·ª•m)")

# T·∫°o danh s√°ch c√°c c·ª•m duy nh·∫•t ƒë·ªÉ ng∆∞·ªùi d√πng ch·ªçn
clusters_list = sorted(df_clustered['cluster'].unique())

# Cho ph√©p ng∆∞·ªùi d√πng ch·ªçn c·ª•m
selected_cluster = st.selectbox("Ch·ªçn c·ª•m ƒë·ªÉ hi·ªÉn th·ªã:", clusters_list)

# L·ªçc c√°c b·∫•t ƒë·ªông s·∫£n theo c·ª•m ƒë√£ ch·ªçn
df_filtered = df_clustered[df_clustered['cluster'] == selected_cluster]

# L·∫•y danh s√°ch cluster duy nh·∫•t
clusters_list = sorted(df_clustered['cluster'].unique())

# G√°n m√†u th·ªß c√¥ng (gi·∫£ s·ª≠ c√≥ t·ªëi ƒëa 10 c·ª•m + noise)
domain = clusters_list
range_colors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', 
                '#8c564b', '#e377c2', '#7f7f7f', '#bcbd22', '#17becf', '#ff0000']  # m√†u ƒë·ªè cu·ªëi c√πng cho -1

# N·∫øu cluster -1 t·ªìn t·∫°i, ƒë·∫£m b·∫£o n√≥ n·∫±m ·ªü cu·ªëi danh s√°ch
if -1 in clusters_list:
    domain = [c for c in clusters_list if c != -1] + [-1]

# V·∫Ω bi·ªÉu ƒë·ªì
chart = alt.Chart(df_filtered).mark_circle(size=60).encode(
    x='area',
    y='price_total',
    color=alt.Color('cluster:N', scale=alt.Scale(domain=domain, range=range_colors)),
    tooltip=['name', 'area', 'price_total', 'district', 'ward', 'cluster']
).interactive()

st.altair_chart(chart, use_container_width=True)

# T·∫°o b·∫£n ƒë·ªì v·ªõi Folium
map_center = [df['long'].mean(), df['lat'].mean()]  # V·ªã tr√≠ trung t√¢m c·ªßa b·∫£n ƒë·ªì
m = folium.Map(location=map_center, zoom_start=12)

# Th√™m c√°c b·∫•t ƒë·ªông s·∫£n v√†o b·∫£n ƒë·ªì
for index, row in df.iterrows():
    # T·∫°o custom icon v·ªõi logo
    custom_icon = CustomIcon(
        icon_image=logo_url,
        icon_size=(20, 20)  # K√≠ch th∆∞·ªõc c·ªßa logo tr√™n b·∫£n ƒë·ªì
    )

    # Th√™m ƒëi·ªÉm v√†o b·∫£n ƒë·ªì v·ªõi custom icon
    folium.Marker(
        location=[row['long'], row['lat']],
        popup=f"{row['name']}<br>Di·ªán t√≠ch: {row['area']} m¬≤<br>Gi√°: {row['price_total']} VND",
        tooltip=row['name'],
        icon=custom_icon  # S·ª≠ d·ª•ng custom_icon cho Marker
    ).add_to(m)

# Hi·ªÉn th·ªã b·∫£n ƒë·ªì trong Streamlit
st_folium(m, width=700, height=500)
